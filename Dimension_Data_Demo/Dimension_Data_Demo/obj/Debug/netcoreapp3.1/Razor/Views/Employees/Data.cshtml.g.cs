#pragma checksum "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "edd9e8f2156c5c0f0941ce4086aa8a332d36f391"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Employees_Data), @"mvc.1.0.view", @"/Views/Employees/Data.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\_ViewImports.cshtml"
using Dimension_Data_Demo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\_ViewImports.cshtml"
using Dimension_Data_Demo.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"edd9e8f2156c5c0f0941ce4086aa8a332d36f391", @"/Views/Employees/Data.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e095a876f1a0191c1ad7e707605b82ee5b2623ab", @"/Views/_ViewImports.cshtml")]
    public class Views_Employees_Data : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/Chart.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/js/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/bootstrap/dist/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "edd9e8f2156c5c0f0941ce4086aa8a332d36f3915317", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "edd9e8f2156c5c0f0941ce4086aa8a332d36f3915579", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "edd9e8f2156c5c0f0941ce4086aa8a332d36f3916678", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "edd9e8f2156c5c0f0941ce4086aa8a332d36f3917777", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "edd9e8f2156c5c0f0941ce4086aa8a332d36f3918876", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <style>
        #chart_container{
            height:300px;
            width: 500px;
            border: 1px solid #ddd;
            padding: 1px;
            border-radius: 4px;
        }

        #chart_div {
            padding: 3rem;
            
        }

        #big_chart {
            height: 200px;
            border: 1px solid #ddd;
            padding: 1px;
            border-radius: 4px;
        }

    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "edd9e8f2156c5c0f0941ce4086aa8a332d36f39111216", async() => {
                WriteLiteral(@"
    <p>Page will reload in 5 minutes</p>
    <div id=""big_chart"">
        Ages of employees
        <canvas id=""emp_age""></canvas>
        <p></p>
    </div>

    <div id=""chart_div"">
        <div id=""chart_container"" style=""float:left"">
            Gender of employees
            <div style=""height:280px;width:470px"">
                <canvas id=""emp_gender""></canvas>
            </div>
            <p></p>
        </div>

        <div id=""chart_container"" style=""float:right"">
            Marital status of employees
            <div style=""height:280px;width:470px"">
                <canvas id=""emp_marrige""></canvas>
            </div>
            <p></p>
        </div>
        <p></p>
    </div>

    <p></p>

    <div id=""chart_div"">
        <div id=""chart_container"" style=""float:left"">
            Employee per department
            <div style=""height:280px;width:470px"">
                <canvas id=""emp_department""></canvas>
            </div>
            <p></p>
        </");
                WriteLiteral(@"div>

        <div id=""chart_container"" style=""float:right"">
            Travel conditions of employees
            <div style=""height:280px;width:470px"">
                <canvas id=""emp_travel""></canvas>
            </div>
            <p></p>
        </div>
        <p></p>
    </div>

    <p></p>

    <div id=""chart_div"">
        <div id=""chart_container"" style=""float:left"">
            Education levels of employees
            <div style=""height:280px;width:470px"">
                <canvas id=""emp_education""></canvas>
            </div>
            <p></p>
        </div>

        <div id=""chart_container"" style=""float:right"">
            Relationship satisfaction levels of employees
            <div style=""height:280px;width:470px"">
                <canvas id=""emp_relationship""></canvas>
            </div>
            <p></p>
        </div>
        <p></p>
    </div>

    <p></p>

    <div id=""chart_div"">
        <div id=""chart_container"" style=""float:left"">
            J");
                WriteLiteral(@"ob satisfaction levels of employees
            <canvas id=""emp_job""></canvas>
            <p></p>
        </div>

        <div id=""chart_container"" style=""float:right"">
            Enviromnet satisfaction levels of employees
            <canvas id=""emp_environment""></canvas>
            <p></p>
        </div>
        <p></p>
    </div>

    <p></p>
    
    <script>//1
        var repArray = ");
#nullable restore
#line 121 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.AGEREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var ages = ");
#nullable restore
#line 122 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.AGE)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_age"");
        var agechart = new Chart(ctx, {

            type: 'bar',
            data: {
                labels: ages,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"",
                        ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green""
                        , ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green""],

                    borderColor: [""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"",
                        ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red""");
                WriteLiteral(@", ""Green"", ""Red"", ""Green""
                        , ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green"", ""Red"", ""Green""],

                    borderWidth: 1,
                    barThickness: 'flex',
                }]
            },
            options: {

                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee amount',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee age(years)',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{ ticks: { beginAtZero: true } }],
                    yAxes: [{ ticks: { beginAtZero: true } }]
                },
");
                WriteLiteral("                legend: { display: false }\r\n            },\r\n        });\r\n\r\n    </script>\r\n\r\n    <script>\r\n//2\r\n        var repArray = ");
#nullable restore
#line 173 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.GENREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var data = ");
#nullable restore
#line 174 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.GENDER)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_gender"");
        var barchart = new Chart(ctx, {

            type: 'pie',
            data: {
                labels: data,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Turquoise"", ""Blue""],
                    borderColor: [""Turquoise"", ""Blue""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                legend: { display: false }
            },
        });
    </script>

    <script>
//3
        var repArray = ");
#nullable restore
#line 199 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.MARREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var data = ");
#nullable restore
#line 200 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.MARRIGE)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_marrige"");
        var barchart = new Chart(ctx, {

            type: 'pie',
            data: {
                labels: data,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Purple"", ""Pink"", ""Lime""],
                    borderColor: [""Purple"", ""Pink"", ""Lime""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                legend: { display: false }
            },
        });
    </script>

    <script>
//4
        var repArray = ");
#nullable restore
#line 225 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.DEPREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var data = ");
#nullable restore
#line 226 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.DEPARTMENT)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_department"");
        var barchart = new Chart(ctx, {

            type: 'pie',
            data: {
                labels: data,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Blue"",""Red"",""Green""],
                    borderColor: [""Blue"", ""Red"", ""Green""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                scales: { xAex: [{ ticks: { beginAtZero: true } }] },
                legend: { display: false }
            },
        });
    </script>

    <script>
//5
        var repArray = ");
#nullable restore
#line 252 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.TRAREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var data = ");
#nullable restore
#line 253 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.TRAVEL)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_travel"");
        var barchart = new Chart(ctx, {

            type: 'pie',
            data: {
                labels: ages,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Lime"", ""Purple"", ""Turquoise"", ""Lime"", ""Purple"", ""Turquoise""],
                    borderColor: [""Lime"", ""Purple"", ""Turquoise"", ""Lime"", ""Purple"", ""Turquoise""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                legend: { display: false }
            },
        });
    </script>

    <script>
//6
        var repArray = ");
#nullable restore
#line 278 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.EDUREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var ages = ");
#nullable restore
#line 279 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.EDUCATION)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_education"");
        var barchart = new Chart(ctx, {

            type: 'bar',
            data: {
                labels: ages,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Red"", ""Turquoise"", ""Red"", ""Turquoise"", ""Red"", ""Turquoise""],
                    borderColor: [""Red"", ""Turquoise"", ""Red"", ""Turquoise"", ""Red"", ""Turquoise""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee amount',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: ");
                WriteLiteral(@"'Employee age(years)',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{ ticks: { beginAtZero: true } }],
                    yAxes: [{ ticks: { beginAtZero: true } }]
                },
                legend: { display: false }
            },
        });
    </script>

    <script>
//7
        var repArray = ");
#nullable restore
#line 322 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.ENVREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var ages = ");
#nullable restore
#line 323 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.ENVIRONMENT)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_environment"");
        var barchart = new Chart(ctx, {

            type: 'bar',
            data: {
                labels: ages,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Purple"", ""Blue"", ""Purple"", ""Blue"", ""Purple"", ""Blue"", ""Purple"", ""Blue""],
                    borderColor: [""Purple"", ""Blue"", ""Purple"", ""Blue"", ""Purple"", ""Blue"", ""Purple"", ""Blue""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee amount',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{
                        scaleLabel: {
                            display: true,
               ");
                WriteLiteral(@"             labelString: 'Employee age(years)',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{ ticks: { beginAtZero: true } }],
                    yAxes: [{ ticks: { beginAtZero: true } }]
                },
                legend: { display: false }
            },
        });
    </script>

    <script>
//8
        var repArray = ");
#nullable restore
#line 366 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.REPJOB)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var data = ");
#nullable restore
#line 367 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.JOB)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_job"");
        var barchart = new Chart(ctx, {

            type: 'bar',
            data: {
                labels: data,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Pink"", ""Grey"", ""Pink"", ""Grey"", ""Pink"", ""Grey"", ""Pink"", ""Grey""],
                    borderColor: [""Pink"", ""Grey"", ""Pink"", ""Grey"", ""Pink"", ""Grey"", ""Pink"", ""Grey""],
                    borderWidth: 1,
                }]
            },
            options: {

                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee amount',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString");
                WriteLiteral(@": 'Employee age(years)',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{ ticks: { beginAtZero: true } }],
                    yAxes: [{ ticks: { beginAtZero: true } }]
                },
                legend: { display: false }
            },
        });
    </script>

    <script>
//9
        var repArray = ");
#nullable restore
#line 410 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
                  Write(Html.Raw(Json.Serialize(ViewBag.RELREP)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var data = ");
#nullable restore
#line 411 "C:\Users\Franco Bester\Music\Project_2\Dimension_Data_Demo\Dimension_Data_Demo\Views\Employees\Data.cshtml"
              Write(Html.Raw(Json.Serialize(ViewBag.REL)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        var ctx = $(""#emp_relationship"");
        var barchart = new Chart(ctx, {

            type: 'bar',
            data: {
                labels: data,
                datasets: [{
                    data: repArray,
                    backgroundColor: [""Lime"", ""Green"", ""Lime"", ""Green"", ""Lime"", ""Green""],
                    borderColor: [""Lime"", ""Green"", ""Lime"", ""Green"", ""Lime"", ""Green""],
                    borderWidth: 1,

                }]
            },
            options: {

                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee amount',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Employee age");
                WriteLiteral(@"(years)',
                            fontSize: 25
                        }
                    }],
                    xAxes: [{ ticks: { beginAtZero: true } }],
                    yAxes: [{ ticks: { beginAtZero: true } }]
                },
                legend: { display: false }
            },
        });
    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>\r\n<meta http-equiv=\"refresh\" content=\"600\" />");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
